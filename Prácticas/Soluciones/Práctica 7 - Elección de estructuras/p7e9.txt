Modulo RelacionesBinariasDe0A100{
    var relaciones: Array<Array<Boolean> 

    //como hago la fabs si no tengo el tad
    //Invariante de rep: Misma long. en todos los subarrays, aRb <==> relaciones[a][b] == True

    proc agregar(inout r: RelacionesBinariasDe0A100, in a,b: nat){
        r.relaciones[a][b] == True;
    }

    proc borrar(inout r: RelacionesBinariasDe0A100, in a,b: nat){
        r.relaciones[a][b] == False;
    }

    proc getARB(in r: RelacionesBinariasDe0A100, in a:nat): ConjuntoLineal<Nat>{
        ConjuntoLineal<Nat> res := conjuntoVacio();

        for(int i=0; i<100; i++){
            if(r.relaciones[a][i]){
                res.agregarRapido(i);
            }
        }

        return res;
    }

    proc getBRA(ConjuntoLineal<Nat> res := conjuntoVacio()){

        for(int i=0; i<100; i++){
            if(r.relaciones[i][a]){
                res.agregarRapido(i);
            }
        }

        return res;
    }
}

Modulo RelacionesConRango{//tambien o haria con diccLog
    var aRb: Array<ConjuntoLineal>
    var bRa: Array<ConjuntoLineal>
}

Modulo RelacionesCualesquiera{
    var aRb: diccLog(nat,nat)
    var bRa: diccLog(nat,nat)

    proc agregar(inout r: RelacionesCualesquiera, in a,b: nat){
        Complejidad: 2 * O(log n) = O(log n)

        r.aRb.definir(a,b);
        r.bRa.definir(b,a);
    }

    proc borrar(inout r: RelacionesCualesquiera, in k: nat){
        Complejidad: 2 * O(log n) = O(log n)

        r.aRb.borrar(k);
        r.bRa.borrar(k);
    }

    proc getARB(in r: RelacionesCualesquiera, in a:nat): ConjuntoLineal<Nat>{
        Complejidad:O(n * log n)

        ConjuntoLineal<Nat> res := conjuntoVacio();

        while(r.aRb.haySiguiente()){ //hago n veces log n ==> O(n * log n)
            if(r.aRb == a){ //comparo keys
                res.agregarRapido(r.aRb.obtener()) //agrego values
            }
            r.aRb = r.aRb.siguiente();
        }

        return res;
    }

    proc getBRA(in r: RelacionesCualesquiera, in a:nat): ConjuntoLineal<Nat>{
        Complejidad:O(n * log n)

        res := conjuntoVacio();

        while(r.bRa.haySiguiente()){
            if(r.bRa.obtener() == a){ //comparo values
                res.agregarRapido(r.bRa) //agrego keys
            }
            r.bRa = r.bRa.siguiente();
        }

        return res;
    }
}