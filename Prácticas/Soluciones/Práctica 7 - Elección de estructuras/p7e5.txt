Modulo DiccionarioConHistoriaImpl<K,V> implementa DiccionarioConHistoria<K,V>{
    var elems: DiccionarioLineal<K,V>
    var cantidades: DiccionarioLineal<K,int>

    pred invRep(d: DiccionarioConHistoriaImpl){
        forall k:K :: k in d.elems <==>L k in d.cantidades &&
        |d.elems|<=|d.cantidades|
    }

    aux funcAbs(d: DiccionarioConHistoriaImpl): DiccionarioConHistoria{
        d': DiccionarioConHistoria |
            d.elems = d'.data;
            d.cantidades = d'.cant;
    }

    proc nuevoDiccionario(out res: DiccionarioConHistoriaImpl){ //O(1)
        res.elems := new DiccionarioLineal(); //O(1)
        res.cantidades := new DiccionarioLineal(); //O(1)
    }

    proc esta(in e: K, inout d: DiccionarioConHistoriaImpl): Boolean { //O(n)
        if(d.elems.esta(k)){ //O(n)
            return True;
        }
        return False;
    }

    proc obtener(in e: K, in d: DiccionarioConHistoriaImpl): V { //O(n)
        return d.elems.obtener(k); //O(n)
    }

    proc definir(inout d: DiccionarioConHistoriaImpl, in k:K, in v:V){ //O(n)
        d.elems.definir(k,v); //O(n)
        d.cantidades.definir(k,d.cantidades.obtener(k)+1); //O(1) 
    }

    proc borrar(inout d: DiccionarioConHistoriaImpl, in K){ //O(n)
        d.elems.borrar(k);
    }

    proc cantSignificados(inout d: DiccionarioConHistoriaImpl, in k:K){ //O(n)
        return d.cantidades.obtener(k);
    }
}