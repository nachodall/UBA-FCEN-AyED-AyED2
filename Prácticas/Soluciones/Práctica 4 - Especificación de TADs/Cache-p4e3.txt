
a) 
TAD CacheTTL<K,V>{
    obs memoria: Dict<clave: K, datos: struct<value: V, time: real>>
    obs timeOut: real

    proc borrarAutomaticamente(inout c: CacheTTL<K,V>)
        Requiere: exists e: K :: e in c.memoria && c.memoria[e].time = c.timeOut
        Requiere: c == old(c)
        Asegura: c.timeOut = old(c).timeOut
        Asegura: sinElementosVencidos(c)
        Asegura: forall k: K :: (k in old(c).memoria && old(c).memoria[k].time < c.timeOut) ==> k in c.memoria
        Asegura: forall k: K :: k in c.memoria ==> k in old(c).memoria

    pred sinElementosVencidos(c: CacheTTL<K,V>)
        ! (exists k: K :: k in c.memoria && c.memoria[k].time >= c.timeOut)

    proc agregarElemento(inout c: CacheTTL<K,V>, in k: K, in v: V)
        Requiere: !(k in c.memoria)
        Requiere: c == old(c)
        Asegura: c.memoria = setKey(old(c.memoria), k, <V, 0>)
        Asegura: c.timeOut = old(c).timeOut

    proc pasaTiempo(inout c: CacheTTL<K,V>, in t: real)
        Requiere: c == old(c) && t < c.timeOut
        Asegura: forall k: K :: k in c.memoria ==> c.memoria[k].time = c.memoria[k].time + t
        Asegura: c.timeOut = old(c).timeOut
        Asegura: forall k: K :: k in c.memoria <==> k in old(c).memoria

    proc accederAElemento(inout c: CacheTTL<K,V>, in k: K)
        Requiere: k in c.memoria && c == old(C)
        Asegura: c.memoria = old(c).memoria
        Asegura: c.timeOut = old(c).timeOut
}

b)
TAD CacheFIFO<K,V>{
    obs memoria: Dict<clave: K, datos: struct<value: V, time: real>>
    obs capacidadMax: int

    proc agregarElemento(inout c: CacheTTL<K,V>, in k: K, in v: V)
        Requiere: !(k in c.memoria)
        Asegura: c.capacidadMax = old(c).capacidadMax
        Asegura: memoriaLlena(old(c)) ==> sinElMasAntiguo(c, old(c)) 
        Asegura: !memoriaLlena(old(c)) ==> seMantieneMemoria(c, old(c))
        Asegura: nuevoElementoEnMemoria(c,k,v)

    pred memoriaLlena(c: CacheFIFO)
        c.capacidadMax == |c.memoria|

    pred sinElMasAntiguo(nue: CacheFIFO, old: CacheFIFO)
        exists k: K :: k in old.memoria && 
        (forall k': K :: k' in old.memoria && k!=k' ==> (old.memoria[k].time >= old.memoria[k'].time && k' in nue.memoria)) &&
        !(k in nue.memoria)

    pred seMantieneMemoria(nue: CacheFIFO, old: CacheFIFO)
        forall k:K :: k in old.memoria <==> k in nue.memoria

    pred nuevoElementoEnMemoria(c: CacheFIFO, k: K, v: V)
        k in c.memoria && c.memoria[k].value = v && c.memoria[k].time = 0

    pred memoriaLlena(c: CacheFIFO)
        c.capacidadMax == |c.memoria|

    proc pasaTiempo(inout c: CacheTTL<K,V>, in t: real)
        Requiere: c == old(c)
        Asegura: forall k: K :: k in c.memoria ==> c.memoria[k].time = c.memoria[k].time + t
        Asegura: c.capacidadMax = old(c).capacidadMax
        Asegura: forall k: K :: k in c.memoria <==> k in old(c).memoria

    proc accederAElemento(inout c: CacheTTL<K,V>, in k: K): V
        Requiere: k in c.memoria && c == old(C)
        Asegura: res = c.memoria[k].value
}

c)
TAD CacheLRU<K,V>{
    obs memoria: Dict<clave: K, datos: struct<value: V, time: real>>
    obs capacidadMax: int

    proc agregarElemento(inout c: CacheTTL<K,V>, in k: K, in v: V)
        Requiere: !(k in c.memoria)
        Asegura: c.capacidadMax = old(c).capacidadMax
        Asegura: memoriaLlena(old(c)) ==> sinElMasAntiguo(c, old(c)) 
        Asegura: !memoriaLlena(old(c)) ==> seMantieneMemoria(c, old(c))
        Asegura: nuevoElementoEnMemoria(c,k,v)

    proc accederAElemento(inout c: CacheTTL<K,V>, in k: K): V
        Requiere: k in c.memoria && c == old(C)
        Asegura: c.memoria = setKey(c.memoria, k, <old(c).memoria[k].value, 0>)
        Asegura: c.capacidadMax = old(c).capacidadMax
        Asegura: res = c.memoria[k]

    proc pasaTiempo(inout c: CacheTTL<K,V>, in t: real)
        Requiere: c == old(c)
        Asegura: forall k: K :: k in c.memoria ==> c.memoria[k].time = c.memoria[k].time + t
        Asegura: c.capacidadMax = old(c).capacidadMax
        Asegura: forall k: K :: k in c.memoria <==> k in old(c).memoria
}
