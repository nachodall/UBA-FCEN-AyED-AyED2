Id es int 
Ocupado es bool

TAD Cola<Trabajo> {
    obs s: Seq<Trabajo>

    proc vacia(in c: Cola<Trabajo>): bool
        asegura res == true <==> c.s == []

    proc encolar(inout c: Cola<Trabajo>, in e: Trabajo)
        asegura c.s == old(c).s + [e]

    proc desencolar(inout c: Cola<Trabajo>) //modifico xq no quiero q me devuelva nada, solo q modifique
        requiere c.s != []
        asegura c.s == old(c).s[1..|old(c).s|]
        asegura res == old(c).s[0]
}

TAD TaD{
    obs tecnicos: dict<Id,Ocupado>
    obs pendientes : Cola<Trabajo>

    proc arrancarLaJornadaLaboral():TaD
        asegura: forall k: K :: k in res.tecnicos && res.tecnicos[k].ocupado = False
        asegura: vacia(res.pendientes)

    proc nuevoTrabajo(t:Trabajo, inout a:TaD)
        asegura: a.pendientes = encolar(old(a).pendientes,t)

    proc enviarTecnico(inout a:TaD)
        requiere: !TodosOcupados(a.tecnicos)
        asegura: a.pendientes = desencolar(old(a).pendientes)
        asegura: exists k: K :: k in old(a).tecnicos && old(a.tecnicos)[k] = False && a.tecnicos[k] = True &&
                 forall k': K :: k' in old(a).tecnicos && k != k' => old(a).tecnicos[k'] = a.tecnicos[k']

    pred tecnicoTermino(inout a:TaD, in tecnico: int)
        requiere: a.tecnicos[tecnico] = True
        asegura: a.tecnicos[tecnico] = False
        asegura: forall k: K :: k in old(a).tecnicos && k != tecnico ==> a.tecnicos[k] = old(a).tecnicos[k]
        asegura: a.pendientes = old(a).pendientes
    
    pred todosOcupados(d:dict<Id,Ocupado>)
        forall k: K :: k in d ==>L d[k] == True
}
