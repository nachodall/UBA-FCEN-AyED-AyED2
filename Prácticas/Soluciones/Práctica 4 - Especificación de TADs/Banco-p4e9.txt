Cliente es int
Data es TipoCliente x OrdenEnLaFila // String x Int 

TAD Banco{
    obs cajaA: Dict <Cliente, Data>
    obs cajaB: Dict <Cliente, Data>

    proc abrirBanco():Banco
        asegura res.cajaA = {}
        asegura res.cajaB = {} 
    
    pred noProlesEnCajaA(c:Dict<Cliente,Tipo>)
        forall k:Cliente :: k in cajaA =>L c[k] = "bien"

    proc atenderCajaB(inout b:Banco)
        requiere: noProlesEnCajaA(b.cajaA) && cajaB.length > 0
        asegura: |b.cajaA| = 0 ==>
                    b.cajaA = old(b).cajaA &&
                    exists c: Cliente :: (c in old(b).cajaB && esPrimeroDeLaFila(c,old(b).cajaB) && c not in b.cajaB &&
                    forall c': Cliente :: c' in old(b).cajaB && c != c' ==>L c' in b.cajaB && b.cajaB[c'].OrdenEnLaFila = old(b).cajaB[c'].OrdenEnLaFila + 1)
        asegura: !vacia(old(b).cajaA) ==>
                    b.cajaB = old(b).cajaB && 
                    exists c: Cliente :: (c in old(b).cajaA && esPrimeroDeLaFila(c,old(b).cajaA) && c not in b.cajaA &&
                 forall c': Cliente :: c' in old(b).cajaA && c != c' ==>L c' in b.cajaA && b.cajaA[c'].OrdenEnLaFila = old(b).cajaA[c'].OrdenEnLaFila + 1)

    pred esPrimeroDeLaFila(atendido: Cliente, d: Dict<Cliente, Data>)
        !exists c:Cliente :: c in fila && c != atendido && d[c].OrdenEnLaFila = 0 && d[atendido].OrdenEnLaFila = 0

    proc atenderCajaA(inout b:Banco)
        requiere: noProlesEnCajaA(b.cajaA) && cajaA.length > 0
        asegura: b.cajaB = old(b).cajaB 
        asegura: exists c: Cliente :: (c in old(b).cajaA && esPrimeroDeLaFila(c,old(b).cajaA) && c not in b.cajaA &&
                 forall c': Cliente :: c' in old(b).cajaA && c != c' ==>L c' in b.cajaA && b.cajaA[c'].OrdenEnLaFila = old(b).cajaA[c'].OrdenEnLaFila + 1)

    proc nuevoCliente(inout b:Banco, in cl:Cliente)
        requiere: noProlesEnCajaA && cl !in b.cajaA && CL !in b.cajaB
        asegura: cl.tipo = "bien" ==> cl in b.cajaA && b.cajaA[cl].TipoCliente = "bien" && estaUltimoEnLaFila(cl,b.cajaA) &&
                 forall k: Cliente :: k in old(b).cajaA ==> b.cajaA[k] = old(b).cajaA[k]
    
    pred estaUltimoEnLaFila(cl: Cliente c: Dict<Cliente, Data>)
        forall k: Cliente :: k in c && k!=cl ==>L c[k].OrdenEnLaFila < c[cl].OrdenEnLaFila

    proc seVaAntesDeTiempo(inout b:Banco, in cl:cliente)
        requiere: cl in b.cajaA || cl in b.cajaB
        asegura: cl in old(b).cajaA ==> cl !in b.cajaA && (forall k: Cliente :: k!=cl && estaDetrasDe(k,cl,b) ==>L b.cajaA[k].OrdenEnLaFila = old(b).cajaA[k].OrdenEnLaFila + 1)
                 && (forall k: Cliente :: k!=cl && !estaDetrasDe(k,cl,b) ==>L b.cajaA[k] = old(b).cajaA[k])
        asegura: cl in old(b).cajaB ==> cl !in b.cajaB && (forall k: Cliente :: k!=cl && estaDetrasDe(k,cl,b) ==>L b.cajaB[k].OrdenEnLaFila = old(b).cajaB[k].OrdenEnLaFila + 1)
                 && (forall k: Cliente :: k!=cl && !estaDetrasDe(k,cl,b) ==>L b.cajaB[k] = old(b).cajaB[k])
}
