TAD Cantidades es struct<actual: int, minimo: nat>
TAD Producto es String
TAD Stock{
    obs stock: Dict<Producto, cantidades>
    obs sustitutos: Dict<Producto, Seq<Producto>>
    obs ventas: Dict<Producto, int>
    obs compras: Dict<Producto, int>

    proc crearAlmacen(): Stock
        asegura: res.stock = {}
        asegura: res.sustitutos = {}

    proc registrarNuevoProducto(inout s: stock, in p: Producto, minimo)
        asegura: s.stock = setKey(old(s).stock, p,<p.minimo, p.minimo>) 
        asegura: s.sustitutos = setKey(old(s).sustitutos, p, {}) 
        asegura: s.ventas = old(s).ventas
        asegura: s.compras = old(s).compras

    proc informarSustituto(inout s: stock, in p: Producto, in sus: producto)
        requiere: p in s.stock 
        requiere: forall k:Producto :: k in old(s).sustituto ==>L sus not in old(s).sustituto[k]
        requiere: |old(s).sustitutos[p]| = 0        
        asegura: s.sustitutos = setKey(old(s).sustitutos, p, sus)
        asegura: s.stock = old(s).stock 
        asegura: s.ventas = old(s).ventas
        asegura: s.compras = old(s).compras

    proc registrarCompra(inout s: Stock, in p: Producto, in cant: nat)
        requiere: p in s.stock
        asegura: s.stock = setKey(old(s).stock, p, s.stock[p] + cant)
        asegura: s.sustitutos = old(s).sustitutos
        asegura: s.ventas = old(s).ventas
        asegura: s.compras = setKey(old(s).compras, p, cant)

    proc registrarVenta(inout s: Stock, in p: Producto, in cant: nat) //hubiese estado bueno meter mas preds
        requiere: p in s.stock 
        en el requiere va q tengo q tener stck 
        asegura: s.compras = old(s).compras 
        asegura: old(s).stock[p].actual >= cant ==> s.stock[p].actual = old(s).stock[p].actual - cant &&
                 restoStockIgual(s,old(s),p) && s.ventas = setKey(old(s).ventas, p, cant) //llegue tranki
        asegura: old(s).stock[p].actual < cant && alcanzaConSus(s, (cant - old(s).stock[p].actual)) ==>
                 s.stock[p].actual = 0 && s.stock[s.sustituto[p]].actual = old(s).stock[s.sustituto[p]].actual - (cant - old(s).stock[p].actual) &&
                 restoStockIgual(s,old(s),p) && s.ventas = setKey(old(s).ventas, p, cant) //llego con el sustituto
        asegura: old(s).stock[p].actual < cant && !alcanzaConSus(s, (cant - old(s).stock[p].actual)) ==>
                 s.stock = old(s).stock && s.ventas = old(s).ventas //no llego ni con el sustituo entonces no registro venta

    pred tieneSustituo(s: Stock, p: Producto)
        |s.sustitutos[p]| = 1

    aux cantStockDeSustituto(s: Stock, p: Producto): int
        res = s.stock[p][0].actual

    pred restoStockIgual(nue: Stock, old: Stock, p: Persona)
        forall k: K :: k in old.stock && k != p => k in nue

    proc productosDebajoDelMinimo(s: Stock): Conj<Producto>
        asegura: forall p:Producto :: p in stock && !tieneSustituo(s,p) ==>L (s.stock[p].actual < s.stock.minimo) && p in res
        asegura: forall p:Producto :: p in stock && tieneSustituo(s,p) ==>L (s.stock[p].actual + cantStockDeSustituto(s,p) < s.stock.minimo) && p in res
}
