2) sum 0<=i<cantDias :: 1 ==> O(n)

1) Modulo Banco implementa IngresosAlBanco{
    var cantPersonasParcial: Vector<Nat> //en el primer dia estan los del primer dia, en el segundo los del primero + los del segundo, etc 

    proc nuevosIngresos(): Banco{
        Complejidad: O(1)

        res.cantPersonasPorDia.vectorVacio();
    }

    proc registrarNuevoDia(in cant:int, inout b: Banco){
        Complejidad: f(n) :: n si n = 2^k; 1 sino

        int nuevoValor := b.cantPersonasParcial[b.cantPersonasParcial.longitud()-1] + cant;
        res.cantPersonasParcial.agregarAtras(nuevoValor); //on
    }

    proc cantDias(in b: Banco): int{
        Complejidad: O(1)

        res := b.cantPersonasParcial.longitud();
        return res;
    }

    proc cantPersonas(in b: Banco, in desde, hasta: int): int{
        Complejidad: O(1)

        if(hasta != desde){
            res := b.cantPersonasParcial[hasta] - b.cantPersonasParcial[desde];
        }
        else{
            res := b.cantPersonasParcial[desde]; //caso que me mandaron a ver las personas en un solo dia
        }
        return res;
    }

    proc mediana(in b: Banco): int{
        Complejidad: O(n)

        int diaMax := 0;
        int maxLong := b.cantPersonasParcial.longitud();

        for(i=0; i<maxLong-1 i++){
            if(cantPersonas(1,i) <= cantPersonas(i+1,maxLong-1)){
                diaMax := i;
            }
        }

        return diaMax;
    }
}
