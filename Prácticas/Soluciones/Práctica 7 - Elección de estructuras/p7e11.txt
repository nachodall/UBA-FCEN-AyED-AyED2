//por enunciado sabemos que la palabra mas larga está acotada, entonces nos viene perfecto el uso de 
un trie. Ya que en el peor caso las operaciones se realizarán en O(25) = O(1)

Debemos cumplir:
Subtexto en O(desde-hasta): Para esto vamos a tener un Vector de Palabras en el orden en el que aparecen.
En el peor caso tendremos que ver desde que comienza hasta que termina, o sea O(texto.len).

CambiarPalabra en O(k) donde k es la cant. de veces que se repite la palabra: Para esto necesitamos guardar los indices de las palabras
de una forma eficiente, accediendo a ellos en O(1), para esto podriamos usar un DiccTrie en el cúal para cada Palabra, nos devuelve un Conjunto de los indices de en que parte aparece.

MasRepetidas en O(1): Para esto necesitamos una variable "cantidadMasRepetida" que me guarde la cantidad de apariciones de las palabras que mas aparecen. Cada vez que se ingresa una Palabra nueva, verificamos si se llega a esa cant,
si es así la agregamos a un Conjunto dentro de mi estructura donde se guardaran las palabras. Para devolver en O(1) podemos usar un ConjTrie en la estructura y devoler una copia.

Palabra es String
Modulo TextoImpl implementa Texto{
    var Palabras: Vector(Palabra),
    var IndicesDePalabra: DiccTrie(Palabra, ConjuntoLineal(int)),
    var CantidadMasRepetida: int,
    var PalabrasMasRepetidas: ConjuntoTrie(Palabra),

    pred invRep(t:TextoImpl){

    }

    aux funcAbs(t:TextoImpl): Texto{
        t2:Texto | 

    }

    proc crearTexto():TextoImpl {
        Complejidad: O(1)

        t.palabras := vectorVacio();
        t.IndicesDePalabra := diccVacio();
        t.CantidadMasRepetida := 0;
        t.PalabrasMasRepetidas := conjuntoVacio();
    }

    proc agregarPalabra(inout t:TextoImpl, p:Palabra){
        Complejidad: O(n^2)

        t.Palabras.agregarAtras(p); //O(n)
        t.IndicesDePalabra[p].agregar(t.palabras[t.palabras.longitud - 1]); //O(log n)
        if(t.IndicesDePalabra[p].tamaño > t.CantidadMasRepetida){
            t.cantidadMasRepetida := t.IndicesDePalabra[p].tamaño; //O(1)
            //creo un conjunto solo con esta palabra y lo asigno a PalabrasMasRepetidas
            var nue := new ConjuntoTrie(int); //lo creo vacio //O(1)
            nue.agregar(p); //O(n)
            t.PalabrasMasRepetidas := nue.copy() //O(n)
        } else if(p in t.PalabrasMasRepetidas){
            //agregar a p al conjunto 
            t.PalabrasMasRepetidas.agregar(p); //O(n)   
        }
    }

    proc buscarNuevasMasRepetidas(inout t:TextoImpl){
        int cantApariciones := 0;

        for(palabra in t.Palabras){ //O(n)
            int ap := t.IndicesDePalabra[palabra].tamaño; //O(1)
            if(ap == cantApariciones){ //O(1)
                t.PalabrasMasRepetidas.agregarRapido(palabra); //O(1)
            } else if(ap > cantApariciones){ //O(1)
                cantApariciones := ap; //O(1)
                t.CantidadMasRepetida := cantApariciones; //O(1)
                t.palabrasMasRepetidas := conjuntoVacio(); //O(1)
                t.palabrasMasRepetidas.agregarRapido(p); //O(1)
            }
        }
    }

    proc borrarPalabra(inout t:TextoImpl, p:Palabra){
        Complejidad:O(n)

        t.Palabras.eliminar(p); //O(n)
        t.IndicesDePalabra.borrar(p); //O(1)
        if(p in t.palabrasMasRepetidas){
            if(t.palabrasMasRepetidas.tamaño == 1){ //solo estaba p
                t.PalabrasMasRepetidas := conjuntoVacio(); //O(1)??
                buscarNuevasMasRepetidas(t); //O(n)
            } else{
                t.palabrasMasRepetidas.eliminar(p); //O(n);
            }
        }
    }

    proc cambiarPalabra(inout t:TextoImpl, in nueva, vieja: Palabra){
        //la modifico del Vector, yendo por todos los indices donde estaba y reemplazando por la nueva 
        //necesito usar los iteradores de conjunto?
        ConjuntoLineal(int) indices := t.IndicesDePalabra[vieja]; //O(1)
        for(i in indices){ //O(k)
            t.Palabras[i] := nueva; // o tengo que usar el modificarPosicion //O(1)
        }

        //borro la key vieja de IndicesDePalabra y creo la nueva 
        t.IndicesDePalabra.borrar(vieja); //O(1)
        t.IndicesDePalabra.definir(nueva, indices); //O(1)

        //modifico palabrasMasRepetidas si es necesario 
        if(t.palabrasMasRepetidas.pertenece(vieja)){
            t.palabrasMasRepetidas.sacar(vieja); //O(1)
            t.palabrasMasRepetidas.agregar(nueva); //O(1)
        }   
    }

    proc masRepetidas(inout t:TextoImpl): ConjuntoTrie(palabra){
        Complejidad: O(1)

        return t.PalabrasMasRepetidas;
    }

    proc Subtexto(inout t:Texto, in desde,hasta :int): TextoImpl{
        Compljidad: O(lenTexto)
        
        res := crearTexto();

        //agrego las palabras al vector 
        for(int i:=desde; i<hasta; i++){ //O(len)
            res.Palabras.agregarAtras(t.Palabras[i]); //O(1)
        }

        //actualizo el resto de la estructura
        for(i:=0; i<res.Palabras.longitud; i++){ //O(len)
            //actualizo IndicesDePalabra
            t.IndicesDePalabra[t.Palabras[i]].agregarRapido(i); //O(1) esto vale independientemente este o no en el diccionario la key  

            //Veo si es la mas repetida 
            if(t.IndicesDePalabra[t.Palabras[i]].tamaño > t.CantidadMasRepetida){ 
                t.CantidadMasRepetida := t.IndicesDePalabra[t.Palabras[i]].tamaño; //O(1)
                t.PalabrasMasRepetidas := conjuntoVacio(); //O(1)
                t.PalabrasMasRepetidas.agregarRapido(t.Palabras[i]); //O(1)
            } else if(t.IndicesDePalabra[t.Palabras[i]].tamaño == t.CantidadMasRepetida){
                t.PalabrasMasRepetidas.agregarRapido(t.Palabras[i]); //O(1)
            }
        }

    }
}