{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica-BoldOblique;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs44 \cf0 \ul \ulc0 \'c1rboles / \'c1rboles Binarios\

\f1\b0\fs36 \ulnone \
Podemos definir el tipo conceptual (matem\'e1tico) 
\f2\i \'e1rbol<T>
\f1\i0 \
Lo definimos recursivamente como:\
	< > (Nil) es un \'e1rbol<T>\
	<T, < , >> (Una tupla que contiene un elemento de tipo T y una secuencia de \'e1rboles <T>) es un \'e1rbol<T> \
\
De forma:\
	<5, <Nil,Nil>> (por ej.)\
  \
Ejemplo gr\'e1fico:\
\
Binario:  							No Binario (Ternario):\
      5								
\f0\b  
\f1\b0 5 \
    /    \\							     /   |   \\      \
  22	  82							  22  70  82   \
  /								   /       \\\
50							        50      89\
   \\								  \\\
   22								  22\
\
Los caminos se llaman ramas\
El primer nodo es ra\'edz, el resto ramas\
Los nodos sin hijos se llaman hojas\
Puedo decir nodo hijo, despu\'e9s nieto, padre, abuelo\
\
\ul Funciones sobre \'e1rboles:\
\ulnone nil?(a), ra\'edz(a), altura(a), elementos(a), est\'e1(elem, a), etc.\
Para binarios tambi\'e9n tengo: izq(a) y der(a)\
\
Las 
\f0\b operaciones
\f1\b0  se definen recursivamente como:\
	Altura(nil) = 0\
	Altura(<a,s>) = 1 + max_i\{altura(s_i)\}\
\
Podemos definir el TAD \'c1rbol y TAD \'c1rbol Binario \
\
Podemos 
\f0\b implementar
\f1\b0  \'c1rboles Binarios con punteros:\
Nodo = Struct <dato: N, izq: Nodo, der: Nodo> \
\
M\'f3dulo AB implementa \'c1rbol Binario \{\
	ra\'edz: Nodo\
\}\
\
Y podemos escribir un invariante de rep y una funci\'f3n de abs.\
\
Tambi\'e9n un 
\f0\b constructor
\f1\b0  de forma bin(elemento, izq, der)\
\
Representaci\'f3n de conjuntos y diccionarios:\
A los \'e1rboles binarios me conviene darles orden para poder hacer la b\'fasqueda m\'e1s f\'e1cil. (
\f3\i\b ABB
\f1\i0\b0 )\
\
\

\f0\b\fs40 \ul \'c1rbol Binario de B\'fasqueda (ABB):
\f1\b0\fs36 \ulnone \
\
Se llama as\'ed porque nos permite hacer f\'e1cil la b\'fasqueda binaria. En ingl\'e9s se llaman BST (Binary Search Trees)
\f0\b\fs40 \ul \

\f1\b0\fs36 \ulnone \
Para todo nodo, todos los valores de los elementos a su izquierda son menores al valor del nodo, y a la derecha siempre mayores.\
De esta forma todos los sub\'e1rboles son a su vez ABBs.\
\
Formalmente:\
esABB(nil): True\
esABB(<C,<I,D>>): (forall e in elementos(I) :: e<=C) && (forall e\'92 in elementos(D) :: e\'92>C) && esABB(I) && esABB(D)\
\

\f0\b Invariante de representaci\'f3n
\f1\b0  de Conjuntos con ABB: \
pred InvRepABB(e: AB)\{\
	esABB(e.arbol) = True	\
\}\
\

\f0\b Algoritmos para ABB
\f1\b0 :
\f0\b \
vacio()
\f1\b0 \
	nil\

\f0\b \
agregar(A,c)
\f1\b0 \
	If nil?(A) then \
		bin(c,nil,nil) \
	else \
		if c<ra\'edz(A) then\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 			bin(raiz(A),agregar(izq(A,c),der(A))\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 		else \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 			bin(raiz(A),izq(A),agregar(der(A),c)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \

\f1\b0 Costo de agregar en ABB (ver que depende de la profundidad del \'e1rbol):\
	en el peor caso: O(n)\
	en el caso promedio: O(log n)\
\
Siempre me conviene tener \'e1rboles que no sean profundos.\
Lo mejor ser\'eda un 
\f0\b \'e1rbol de altura log n
\f1\b0 , o sea la ra\'edz es la mitad, y as\'ed sucesivamente, de forma:\
          5\
       /     \\\
     3       7\
   /   \\     /  \\\
 2	4   6   8\
\
Quiero evitar los que son tipo (terminan siendo similares a una lista y me \'93arruinan\'94 la b\'fasqueda binaria):\
       3 \
	 \\\
	  4\
	    \\\
	     5\
		\\\
		 6\
		   \\\
		    7	\
\

\f0\b borrar(A,c)
\f1\b0 \
3 Casos:\
	1) Borrar una hoja:\
		Busco al padre y elimino la hoja (Si estoy en un lenguaje sin Garbage Collector, tengo que hacer un dispose de memoria)\
\
	2) Borrar un nodo con un \'fanico hijo:\
		Busco al padre del nodo, y le digo que su nuevo hijo ahora es el hijo del nodo a borrar (o sea el nieto).\
\
	3) Borrar un nodo con dos hijos:\
		No puedo hacer el enganche igual al anterior xq ahora tiene dos hijos.\
		Para esto me guardo el valor del predecesor o sucesor inmediato de mi nodo y lo pego en donde estaba el nodo a borrar\
		Ahora borro el inmediato xq a lo sumo tiene un hijo o es hoja.\
}